class MultiPlayerSocket{
    constructor(playground){
        this.playground = playground;

        this.ws = new WebSocket("wss://www.renyuhui.top/wss/multiplayer/"); //创建连接

        this.start();
    }

    start(){
        this.receive();
    }

    receive(){ //接收后端群发的信息
        let outer = this;

        this.ws.onmessage = function(e){
            let data = JSON.parse(e.data);
            let uuid = data.uuid;

            if(uuid === outer.uuid) return false; //由于最后来的玩家也在组内，所以也会收到自己发的消息，筛除即可

            let event = data.event;
            if(event === "create_player") {
                outer.receive_create_player(uuid,data.username,data.photo);
            } else if(event === "move_to") {
                outer.receive_move_to(uuid,data.tx,data.ty);
            } else if(event === "shoot_ball") {
                outer.receive_shoot_ball(uuid,data.ball_skill,data.tx,data.ty,data.ball_uuid);
            } else if(event === "attack"){
                outer.receive_attack(uuid,data.attackee_uuid,data.x,data.y,data.angle,data.damage,data.ball_uuid);
            } else if(event === "flash"){
                outer.receive_flash(uuid,data.tx,data.ty);
            } else if(event === "message"){
                outer.receive_message(uuid,data.username,data.text);
            }
        }
    }

    send_create_player(username,photo){
        let outer = this;
        this.ws.send(JSON.stringify({
            'event': "create_player",
            'uuid': outer.uuid,
            'username': username,
            'photo': photo,
        }));
    }

    receive_create_player(uuid,username,photo){
        let player = new Player(this.playground,this.playground.width / 2 / this.playground.scale,0.5,0.06,"white",0.15,"enemy",username,photo);
        player.uuid = uuid; //#统一使用第一个创建玩家的uuid
        this.playground.players.push(player);
    }
    send_move_to(tx,ty){
        let outer = this;
        this.ws.send(JSON.stringify({
            'event': "move_to", //事件
            'uuid': outer.uuid, //玩家uuid
            'tx': tx, //要移动的位置
            'ty': ty,
        }));
    }
    receive_move_to(uuid,tx,ty){
        let player = this.get_player(uuid);

        if(player) {
            player.move_to(tx,ty);
        }
    }
    get_player(uuid){
        let players = this.playground.players;

        for(let i = 0;i < players.length;i++){
            let player = players[i];
            if(player.uuid === uuid){
                return player;
            }
        }

        return null;
    }

    send_shoot_ball(ball_skill,tx,ty,ball_uuid){
        let outer = this;
        this.ws.send(JSON.stringify({
            'event': "shoot_ball",
            'uuid': outer.uuid,
            'ball_skill': ball_skill,
            'tx': tx,
            'ty': ty,
            'ball_uuid': ball_uuid,
        }));
    }

    receive_shoot_ball(uuid,ball_skill,tx,ty,ball_uuid){
        let player = this.get_player(uuid);

        if(player){
            let ball = player.shoot_ball(ball_skill,tx,ty);
            ball.uuid = ball_uuid;
        }
    }

    send_attack(attackee_uuid,x,y,angle,damage,ball_uuid){
        let outer = this;
        this.ws.send(JSON.stringify({
            'event': "attack",
            'uuid': outer.uuid,
            'attackee_uuid': attackee_uuid,
            'x': x,
            'y': y,
            'angle': angle,
            'damage': damage,
            'ball_uuid': ball_uuid,
        }));
    }

    receive_attack(uuid,attackee_uuid,x,y,angle,damage,ball_uuid){
        let attacker = this.get_player(uuid);
        let attackee = this.get_player(attackee_uuid);

        if(attacker && attackee) {
            attackee.receive_attack(x,y,angle,damage,ball_uuid,attacker);
        }
    }

    send_flash(tx,ty){
        let outer = this;
        this.ws.send(JSON.stringify({
            'event': "flash", //事件
            'uuid': outer.uuid, //玩家uuid
            'tx': tx, //要移动的位置
            'ty': ty,
        }));
    }

    receive_flash(uuid,tx,ty){
        let player = this.get_player(uuid);
        if(player){
            player.flash(tx,ty);
        }
    }

    send_message(username,text){
        let outer = this;
        this.ws.send(JSON.stringify({
            'event': "message",
            'uuid': outer.uuid,
            'username': data['username'],
            'text': data['text'],
        }));
    }

    receive_message(uuid,username,text){
        this.playground.chat_field.add_message(username,text);
    }
}
